GIT
https://git-scm.com/book/ru/v2/        //Git manual
https://learngitbranching.js.org/?locale=uk     // Интерактивный сайт для тренинга Гита

#Гит конфиг
git config --global user.name d3fa
git config --global user.email test@email.com
git config -l


ssh-kygen //создать ссш ключи

git remote set-url origin git@github.com:d3fa/learning-git.git   // Изменить ссылку на репо ssh ссылкой
git clone git@github.com:d3fa/learning-git.git //Клон репы по ссш
git remote -v         //посмотреть по какой ссылке работает конкретная репа



git init        //  для создания локального репозитория название папки будет названием Репы

git status


#Staging# 
# 4 Стадии работы Гита:      Untracked -> Staged -> copy in local repository -> copy to remote repo

# Коммиты Git - Запись изменений в репозиторий https://git-scm.com/book/ru/v2/Основы-Git-Запись-изменений-в-репозиторий
git add *     # Добавления файлов в индекс отслеживания
git restore <filename> # Удаление файла-папки из индекса

git commit -m "Commit Comment"
     git rm --cached README  //Удалить из коммита файл README, но оставить на диске, если он еще не отправлен на сервер
git push origin    #to github

git diff --staged   #Разница между стадиями
git diff --name-only --cached    //список файлов, которые будут добавлены в коммит после git add
git diff --name-only HEAD^ HEAD   //список имен файлов в последнем коммите.

git log -1 -p   #-1 количество коммитов на экран, -р сами изменения в коммите
git log -4 --pretty=format:"%h %s"
git log --pretty=oneline
git log --name-status   //Показать файлы в коммите




Бранчи
git branch   //list Branch - показывает где мы работаем и все бранчи
git branch dev  //create new branch "DEV"
git branch checkout dev // выбрать (перейти) бренч dev
git branch -f main HEAD~3 //Сделать Мейн ветку на этом коммите

#Git - Перезапись истории, Объединение, Удаление коммитов https://git-scm.com/book/ru/v2/Инструменты-Git-Перезапись-истории
git rebase
git rebase -i // Интерактивный ребейс, можно git rebase -i HEAD~3   

git checkout -b dev  //Создать и сразу перейти в новый бранч с название dev

git branch -D dev //Local delete "DEV" branch
git push origin --delete "my other branch" // Удалить бранч на сервере

git branch main //Перейти в главный бранч
git merge dev //Замержить бранч DEV to MAIN

git cherry-pick <Коміт1> <Коміт2> <...> //Копирует коммит из любого бранча следом за тем где стоит HEAD

Гоняем HEAD по коммитам
git checkout 240421c2c2f85cc61227ef37bb8dc74e06926ee1     //git log   берем ХЭШ нужного коммита и вставляем в чекаут.


git reset --hard HEAD~2  //Удалить последние №, у нас это равно 2 коммита и откатиться назад по логу. Файлы удаляются 
git reset --soft HEAD~6   //Удалить 6 коммитов из лога, сами файлы остаются на месте. Слить коммиты...
git reset --soft HEAD~1 // (эта команда отменяет коммит, оставляя всего его изменённые файлы в индексе)
git push origin +main //запушить все свое локалье говно на гитхаб, включая удаление файлов. На гите будет как на компе
git push origin dev //Запушить все в DEV бранч 

git commit --amend //изменить в текстовом редакторе последний коммит, без создания сомого коммита
git checkout main    //перейти на последнюю версию

git tag -a [tag_name] -m [message]  //git tag v2.1.1 -m "patch v2.1.1"
git push [remote_name] [tag_name]  //For example to push github: git push origin v2.1.1
git push origin --tags //The command pushes all local tags to the specified origin repository.
git tag -l   //list tags
        -f  // --force  Replace an existing tag with the given name (instead of failing)
        -d  // --delete Delete existing tags with the given names.












or create a new repository on the command line
echo "# learning-git" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/d3fa/learning-git.git
git push -u origin main


or push an existing repository from the command line
git remote add origin https://github.com/d3fa/learning-git.git
git branch -M main
git push -u origin main





